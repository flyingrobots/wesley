-- RLS Policies generated by Wesley from @rls directives
-- Integrated with Supabase Auth (auth.uid() and auth.jwt())
-- Generated: 2024-03-20T10:30:00Z

-- ══════════════════════════════════════════════════════════════════
-- USER TABLE RLS
-- ══════════════════════════════════════════════════════════════════

-- Enable RLS for User
ALTER TABLE "User" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "User_select_policy" ON "User"
  FOR SELECT
  USING (true);  -- Anyone can see users

CREATE POLICY "User_insert_policy" ON "User"
  FOR INSERT
  WITH CHECK (false);  -- Only through registration

CREATE POLICY "User_update_policy" ON "User"
  FOR UPDATE
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);  -- Users can update themselves

CREATE POLICY "User_delete_policy" ON "User"
  FOR DELETE
  USING (false);  -- No user deletion

-- ══════════════════════════════════════════════════════════════════
-- PRODUCT TABLE RLS  
-- ══════════════════════════════════════════════════════════════════

-- Enable RLS for Product
ALTER TABLE "Product" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Product_select_policy" ON "Product"
  FOR SELECT
  USING (
    published = true 
    OR auth.uid() IN (
      SELECT id FROM "User" 
      WHERE role = 'admin'
    )
  );

CREATE POLICY "Product_insert_policy" ON "Product"
  FOR INSERT
  WITH CHECK (
    auth.uid() IN (
      SELECT id FROM "User" 
      WHERE role = 'admin'
    )
  );

CREATE POLICY "Product_update_policy" ON "Product"
  FOR UPDATE
  USING (
    auth.uid() IN (
      SELECT id FROM "User" 
      WHERE role = 'admin'
    )
  )
  WITH CHECK (
    auth.uid() IN (
      SELECT id FROM "User" 
      WHERE role = 'admin'
    )
  );

CREATE POLICY "Product_delete_policy" ON "Product"
  FOR DELETE
  USING (
    auth.uid() IN (
      SELECT id FROM "User" 
      WHERE role = 'admin'
    )
  );

-- ══════════════════════════════════════════════════════════════════
-- ORDER TABLE RLS (Critical financial data)
-- ══════════════════════════════════════════════════════════════════

-- Enable RLS for Order
ALTER TABLE "Order" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Order_select_policy" ON "Order"
  FOR SELECT
  USING (
    user_id = auth.uid() 
    OR auth.uid() IN (
      SELECT id FROM "User" 
      WHERE role = 'admin'
    )
  );

CREATE POLICY "Order_insert_policy" ON "Order"
  FOR INSERT
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Order_update_policy" ON "Order"
  FOR UPDATE
  USING (
    user_id = auth.uid() 
    AND status = 'pending'
  )
  WITH CHECK (
    user_id = auth.uid() 
    AND status = 'pending'
  );

CREATE POLICY "Order_delete_policy" ON "Order"
  FOR DELETE
  USING (false);  -- Orders cannot be deleted, only cancelled

-- ══════════════════════════════════════════════════════════════════
-- ORDERITEM TABLE RLS
-- ══════════════════════════════════════════════════════════════════

-- Enable RLS for OrderItem
ALTER TABLE "OrderItem" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "OrderItem_select_policy" ON "OrderItem"
  FOR SELECT
  USING (
    order_id IN (
      SELECT id FROM "Order" 
      WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "OrderItem_insert_policy" ON "OrderItem"
  FOR INSERT
  WITH CHECK (
    order_id IN (
      SELECT id FROM "Order" 
      WHERE user_id = auth.uid() 
      AND status = 'pending'
    )
  );

CREATE POLICY "OrderItem_update_policy" ON "OrderItem"
  FOR UPDATE
  USING (
    order_id IN (
      SELECT id FROM "Order" 
      WHERE user_id = auth.uid() 
      AND status = 'pending'
    )
  )
  WITH CHECK (
    order_id IN (
      SELECT id FROM "Order" 
      WHERE user_id = auth.uid() 
      AND status = 'pending'
    )
  );

CREATE POLICY "OrderItem_delete_policy" ON "OrderItem"
  FOR DELETE
  USING (
    order_id IN (
      SELECT id FROM "Order" 
      WHERE user_id = auth.uid() 
      AND status = 'pending'
    )
  );

-- ══════════════════════════════════════════════════════════════════
-- CART TABLE RLS
-- ══════════════════════════════════════════════════════════════════

-- Enable RLS for Cart
ALTER TABLE "Cart" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Cart_select_policy" ON "Cart"
  FOR SELECT
  USING (user_id = auth.uid());

CREATE POLICY "Cart_insert_policy" ON "Cart"
  FOR INSERT
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Cart_update_policy" ON "Cart"
  FOR UPDATE
  USING (user_id = auth.uid())
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Cart_delete_policy" ON "Cart"
  FOR DELETE
  USING (user_id = auth.uid());

-- ══════════════════════════════════════════════════════════════════
-- CARTITEM TABLE RLS
-- ══════════════════════════════════════════════════════════════════

-- Enable RLS for CartItem
ALTER TABLE "CartItem" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "CartItem_select_policy" ON "CartItem"
  FOR SELECT
  USING (
    cart_id IN (
      SELECT id FROM "Cart" 
      WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "CartItem_insert_policy" ON "CartItem"
  FOR INSERT
  WITH CHECK (
    cart_id IN (
      SELECT id FROM "Cart" 
      WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "CartItem_update_policy" ON "CartItem"
  FOR UPDATE
  USING (
    cart_id IN (
      SELECT id FROM "Cart" 
      WHERE user_id = auth.uid()
    )
  )
  WITH CHECK (
    cart_id IN (
      SELECT id FROM "Cart" 
      WHERE user_id = auth.uid()
    )
  );

CREATE POLICY "CartItem_delete_policy" ON "CartItem"
  FOR DELETE
  USING (
    cart_id IN (
      SELECT id FROM "Cart" 
      WHERE user_id = auth.uid()
    )
  );

-- ══════════════════════════════════════════════════════════════════
-- INVENTORYLOG TABLE RLS (Restricted to staff)
-- ══════════════════════════════════════════════════════════════════

-- Enable RLS for InventoryLog
ALTER TABLE "InventoryLog" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "InventoryLog_select_policy" ON "InventoryLog"
  FOR SELECT
  USING (
    auth.uid() IN (
      SELECT id FROM "User" 
      WHERE role IN ('admin', 'warehouse')
    )
  );

CREATE POLICY "InventoryLog_insert_policy" ON "InventoryLog"
  FOR INSERT
  WITH CHECK (
    auth.uid() IN (
      SELECT id FROM "User" 
      WHERE role IN ('admin', 'warehouse')
    )
  );

CREATE POLICY "InventoryLog_update_policy" ON "InventoryLog"
  FOR UPDATE
  USING (false)
  WITH CHECK (false);  -- Logs are immutable

CREATE POLICY "InventoryLog_delete_policy" ON "InventoryLog"
  FOR DELETE
  USING (false);  -- Logs cannot be deleted