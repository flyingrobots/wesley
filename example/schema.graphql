# Wesley Example Schema - Demonstrates all features
# This schema shows @uid, @weight, @critical, @sensitive directives

directive @uid(value: String!) on OBJECT | FIELD_DEFINITION
directive @weight(value: Int! = 5) on OBJECT | FIELD_DEFINITION
directive @critical on OBJECT | FIELD_DEFINITION  
directive @sensitive on FIELD_DEFINITION
directive @pii on FIELD_DEFINITION

type User @table @uid(value: "tbl:user") @critical {
  id: ID! 
    @primaryKey 
    @uid(value: "col:user.id")
    @default(expr: "gen_random_uuid()")
  
  email: String! 
    @unique 
    @index
    @pii
    @uid(value: "col:user.email")
    @weight(value: 8)
  
  password_hash: String! 
    @sensitive
    @uid(value: "col:user.password")
    @weight(value: 10)
    @check(expr: "char_length(password_hash) = 60")
  
  username: String
    @unique
    @uid(value: "col:user.username")
    @weight(value: 6)
  
  theme: String
    @default(expr: "'light'")
    @weight(value: 2)
  
  created_at: DateTime!
    @default(expr: "now()")
    @uid(value: "col:user.created_at")
  
  updated_at: DateTime!
    @default(expr: "now()")
    @updatedAt
    @uid(value: "col:user.updated_at")
  
  # Virtual relations
  posts: [Post!]! @hasMany
}

type Post @table @uid(value: "tbl:post") @rls(
  select: "true"
  insert: "auth.uid() = user_id"
  update: "auth.uid() = user_id"  
  delete: "auth.uid() = user_id"
) {
  id: ID!
    @primaryKey
    @uid(value: "col:post.id")
    @default(expr: "gen_random_uuid()")
  
  user_id: ID!
    @foreignKey(ref: "User.id")
    @index
    @uid(value: "col:post.user_id")
    @weight(value: 7)
  
  title: String!
    @uid(value: "col:post.title")
    @weight(value: 5)
  
  content: String
    @uid(value: "col:post.content")
    @weight(value: 4)
  
  published: Boolean!
    @default(expr: "false")
    @uid(value: "col:post.published")
    @weight(value: 3)
  
  published_at: DateTime
    @uid(value: "col:post.published_at")
  
  created_at: DateTime!
    @default(expr: "now()")
    @uid(value: "col:post.created_at")
  
  # Virtual relations
  user: User! @hasOne
  comments: [Comment!]! @hasMany
}

type Comment @table @uid(value: "tbl:comment") {
  id: ID!
    @primaryKey
    @uid(value: "col:comment.id")
    @default(expr: "gen_random_uuid()")
  
  post_id: ID!
    @foreignKey(ref: "Post.id")
    @index
    @uid(value: "col:comment.post_id")
    @weight(value: 6)
  
  user_id: ID!
    @foreignKey(ref: "User.id")
    @index
    @uid(value: "col:comment.user_id")
    @weight(value: 6)
  
  content: String!
    @uid(value: "col:comment.content")
    @weight(value: 4)
  
  created_at: DateTime!
    @default(expr: "now()")
    @uid(value: "col:comment.created_at")
  
  # Virtual relations
  post: Post! @hasOne
  user: User! @hasOne
}
