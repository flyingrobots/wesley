-- Migration generated by Wesley
-- From: schema.graphql (SHA: abc123)
-- To: schema-v2.graphql (SHA: def456)
-- Generated: 2024-03-20T10:30:00Z
-- MRI Score: 0.42 (42% risk - MEDIUM)

-- ══════════════════════════════════════════════════════════════════
-- Migration Risk Analysis:
--   • ADD COLUMN operations: 3 (low risk: +15 points)
--   • ALTER TYPE operation: 1 (medium risk: +20 points)
--   • CREATE TABLE: 1 (low risk: +5 points)
--   • DROP TABLE: 2 (HIGH RISK: +40 points each = 80 points)
--   • Total Risk: 120 points → MRI: 0.42
-- ══════════════════════════════════════════════════════════════════

BEGIN;

-- ────────────────────────────────────────────────────────────────
-- LOW RISK: Add new columns with defaults
-- ────────────────────────────────────────────────────────────────

-- Add phone field to User (weight: 8)
ALTER TABLE "User" 
ADD COLUMN IF NOT EXISTS "phone" VARCHAR(20);
COMMENT ON COLUMN "User"."phone" IS '@pii @weight(8) - Added in v2';

-- Add discount fields to Order (weight: 5-6)
ALTER TABLE "Order" 
ADD COLUMN IF NOT EXISTS "discount_code" VARCHAR(50),
ADD COLUMN IF NOT EXISTS "discount_amount_cents" INTEGER DEFAULT 0;

-- ────────────────────────────────────────────────────────────────
-- MEDIUM RISK: Type changes (requires validation)
-- ────────────────────────────────────────────────────────────────

-- Change Product.price_cents from INT to BIGINT
-- Wesley detected this could fail if values > 2147483647 exist
DO $$
BEGIN
  -- Check if safe to convert
  IF EXISTS (SELECT 1 FROM "Product" WHERE "price_cents" > 2147483647) THEN
    RAISE EXCEPTION 'Cannot safely convert price_cents to BIGINT: values too large';
  END IF;
  
  -- Safe to proceed
  ALTER TABLE "Product" 
  ALTER COLUMN "price_cents" TYPE BIGINT;
  
  RAISE NOTICE 'Successfully converted Product.price_cents to BIGINT';
EXCEPTION
  WHEN OTHERS THEN
    RAISE WARNING 'Failed to convert type: %', SQLERRM;
    -- Continue migration but log for manual review
END $$;

-- ────────────────────────────────────────────────────────────────
-- LOW RISK: Create new table
-- ────────────────────────────────────────────────────────────────

CREATE TABLE IF NOT EXISTS "Review" (
  "id" UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  "product_id" UUID NOT NULL REFERENCES "Product"("id"),
  "user_id" UUID NOT NULL REFERENCES "User"("id"),
  "order_id" UUID REFERENCES "Order"("id"),
  
  "rating" INTEGER NOT NULL CHECK ("rating" >= 1 AND "rating" <= 5),
  "title" VARCHAR(255),
  "content" TEXT,
  
  "helpful_count" INTEGER NOT NULL DEFAULT 0,
  "verified_purchase" BOOLEAN NOT NULL DEFAULT false,
  
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT now(),
  "updated_at" TIMESTAMPTZ NOT NULL DEFAULT now(),
  
  -- Ensure one review per user per product
  UNIQUE("product_id", "user_id")
);

-- Create indexes for Review table
CREATE INDEX IF NOT EXISTS "idx_review_product" ON "Review"("product_id");
CREATE INDEX IF NOT EXISTS "idx_review_user" ON "Review"("user_id");
CREATE INDEX IF NOT EXISTS "idx_review_order" ON "Review"("order_id") WHERE "order_id" IS NOT NULL;
CREATE INDEX IF NOT EXISTS "idx_review_rating" ON "Review"("rating");

-- Add trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER review_updated_at
  BEFORE UPDATE ON "Review"
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at();

-- ────────────────────────────────────────────────────────────────
-- HIGH RISK: Drop tables (data loss warning!)
-- ────────────────────────────────────────────────────────────────

-- Wesley detected removal of Cart and CartItem tables
-- MRI: +80 points (VERY HIGH RISK)

-- Safety check: Ensure no active carts exist
DO $$
DECLARE
  active_carts INTEGER;
  active_items INTEGER;
BEGIN
  SELECT COUNT(*) INTO active_carts FROM "Cart" 
  WHERE "expires_at" > now();
  
  SELECT COUNT(*) INTO active_items FROM "CartItem" ci
  JOIN "Cart" c ON ci."cart_id" = c."id"
  WHERE c."expires_at" > now();
  
  IF active_carts > 0 OR active_items > 0 THEN
    RAISE EXCEPTION 'Cannot drop Cart tables: % active carts with % items found', 
      active_carts, active_items;
  END IF;
  
  -- Archive data before dropping (safety measure)
  CREATE TABLE IF NOT EXISTS "_archive_Cart" AS 
  SELECT *, now() AS archived_at FROM "Cart";
  
  CREATE TABLE IF NOT EXISTS "_archive_CartItem" AS 
  SELECT *, now() AS archived_at FROM "CartItem";
  
  -- Now safe to drop
  DROP TABLE IF EXISTS "CartItem" CASCADE;
  DROP TABLE IF EXISTS "Cart" CASCADE;
  
  RAISE NOTICE 'Cart tables archived to _archive_Cart and _archive_CartItem';
EXCEPTION
  WHEN OTHERS THEN
    RAISE WARNING 'Failed to drop Cart tables: %', SQLERRM;
    RAISE EXCEPTION 'Migration aborted due to high-risk operation failure';
END $$;

-- ────────────────────────────────────────────────────────────────
-- Data migration and cleanup
-- ────────────────────────────────────────────────────────────────

-- Migrate verified purchases to Review table
INSERT INTO "Review" (product_id, user_id, order_id, rating, verified_purchase, created_at)
SELECT DISTINCT 
  oi.product_id,
  o.user_id,
  o.id,
  5, -- Default rating for existing purchases
  true, -- Verified since they purchased
  o.created_at
FROM "OrderItem" oi
JOIN "Order" o ON oi.order_id = o.id
WHERE o.status = 'delivered'
ON CONFLICT (product_id, user_id) DO NOTHING;

-- ────────────────────────────────────────────────────────────────
-- Update RLS policies for new table
-- ────────────────────────────────────────────────────────────────

ALTER TABLE "Review" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "review_select_policy" ON "Review"
  FOR SELECT
  USING (true); -- Public reviews

CREATE POLICY "review_insert_policy" ON "Review"
  FOR INSERT
  WITH CHECK (
    auth.uid() = user_id 
    AND (
      order_id IS NULL 
      OR order_id IN (
        SELECT id FROM "Order" WHERE user_id = auth.uid()
      )
    )
  );

CREATE POLICY "review_update_policy" ON "Review"
  FOR UPDATE
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "review_delete_policy" ON "Review"
  FOR DELETE
  USING (auth.uid() = user_id);

-- ────────────────────────────────────────────────────────────────
-- Migration validation
-- ────────────────────────────────────────────────────────────────

DO $$
BEGIN
  -- Verify all changes applied
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'User' AND column_name = 'phone') THEN
    RAISE WARNING 'User.phone column not created';
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                WHERE table_name = 'Review') THEN
    RAISE WARNING 'Review table not created';
  END IF;
  
  IF EXISTS (SELECT 1 FROM information_schema.tables 
            WHERE table_name IN ('Cart', 'CartItem')) THEN
    RAISE WARNING 'Cart tables still exist';
  END IF;
  
  RAISE NOTICE 'Migration validation complete';
END $$;

COMMIT;

-- ══════════════════════════════════════════════════════════════════
-- Post-migration notes:
-- 1. Review table created with RLS policies
-- 2. Cart tables archived before removal
-- 3. Price type change validated for safety
-- 4. MRI Score: 0.42 (MEDIUM RISK - manual review recommended)
-- 
-- Rollback instructions:
-- 1. Restore Cart tables from _archive_Cart and _archive_CartItem
-- 2. Remove Review table: DROP TABLE "Review" CASCADE;
-- 3. Remove new columns: ALTER TABLE "User" DROP COLUMN "phone";
-- ══════════════════════════════════════════════════════════════════