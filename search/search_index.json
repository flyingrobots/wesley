{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wesley \u00b6 Wesley is the \u201cschema-first\u201d data layer for Postgres and Supabase. Provide a GraphQL SDL input and the tooling generates: PostgreSQL DDL and phased migrations (Expand \u2192 Backfill \u2192 Validate \u2192 Switch \u2192 Contract) TypeScript + Zod models for applications RLS policies, Supabase helpers, and pgTAP tests Evidence bundles and HOLMES scoring for release gates \ud83d\udcc4 Read the project README for the full story. \ud83e\udded The delivery lifecycle explains how Transform \u2192 Plan \u2192 Rehearse \u2192 Ship fit together. \ud83d\udcc5 Current release status lives on the roadmap . Quick facts \u00b6 Input: GraphQL SDL with @wes_* directives Outputs: SQL, migrations, TypeScript, Zod, pgTAP, evidence bundles Runtime: Node.js 18+ (CLI ships as ESM modules) License: MIND\u2011UCAL v1.0 (see LICENSE ) Source: github.com/flyingrobots/wesley Getting started quickly \u00b6 Install the CLI and run the local Quick Start: npm install -g @wesley/cli wesley init wesley generate --schema schema.graphql --emit-bundle wesley plan --schema schema.graphql --explain wesley rehearse --schema schema.graphql --dry-run --json For a richer walkthrough, run the BLADE demo which scripts Transform \u2192 Plan \u2192 Rehearse \u2192 Certify on an example schema.","title":"Home"},{"location":"#wesley","text":"Wesley is the \u201cschema-first\u201d data layer for Postgres and Supabase. Provide a GraphQL SDL input and the tooling generates: PostgreSQL DDL and phased migrations (Expand \u2192 Backfill \u2192 Validate \u2192 Switch \u2192 Contract) TypeScript + Zod models for applications RLS policies, Supabase helpers, and pgTAP tests Evidence bundles and HOLMES scoring for release gates \ud83d\udcc4 Read the project README for the full story. \ud83e\udded The delivery lifecycle explains how Transform \u2192 Plan \u2192 Rehearse \u2192 Ship fit together. \ud83d\udcc5 Current release status lives on the roadmap .","title":"Wesley"},{"location":"#quick-facts","text":"Input: GraphQL SDL with @wes_* directives Outputs: SQL, migrations, TypeScript, Zod, pgTAP, evidence bundles Runtime: Node.js 18+ (CLI ships as ESM modules) License: MIND\u2011UCAL v1.0 (see LICENSE ) Source: github.com/flyingrobots/wesley","title":"Quick facts"},{"location":"#getting-started-quickly","text":"Install the CLI and run the local Quick Start: npm install -g @wesley/cli wesley init wesley generate --schema schema.graphql --emit-bundle wesley plan --schema schema.graphql --explain wesley rehearse --schema schema.graphql --dry-run --json For a richer walkthrough, run the BLADE demo which scripts Transform \u2192 Plan \u2192 Rehearse \u2192 Certify on an example schema.","title":"Getting started quickly"},{"location":"quick-start/","text":"Quick Start \u00b6 Follow these steps to try Wesley locally. The commands mirror the README but are condensed here for convenience. 1. Clone and install \u00b6 git clone https://github.com/flyingrobots/wesley.git cd wesley pnpm install 2. Generate artifacts \u00b6 Compile the example schema and operation plans: node packages/wesley-host-node/bin/wesley.mjs generate \\ --schema test/fixtures/examples/schema.graphql \\ --ops test/fixtures/examples/ops \\ --emit-bundle \\ --out-dir out/examples 3. Inspect the plan \u00b6 node packages/wesley-host-node/bin/wesley.mjs plan \\ --schema test/fixtures/examples/schema.graphql \\ --explain 4. Rehearse (dry-run) \u00b6 node packages/wesley-host-node/bin/wesley.mjs rehearse \\ --schema test/fixtures/examples/schema.graphql \\ --dry-run --json This runs the migration plan without touching a database and prints the REALM (verdict) JSON. 5. Next steps \u00b6 Explore the roadmap: docs/roadmap.md Enable Supabase-specific generators: see docs/features/ . Learn about HOLMES scoring: docs/architecture/holmes-architecture.md Need a scripted, showcase flow? Run the BLADE Demo . \u2139\ufe0f Local Postgres fixtures The repo seeds the Dockerised PostgreSQL instance with SQL stored in test/fixtures/postgres/ . Those files are version-controlled so every developer gets the same extensions and baseline objects the first time the container starts.","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"Follow these steps to try Wesley locally. The commands mirror the README but are condensed here for convenience.","title":"Quick Start"},{"location":"quick-start/#1-clone-and-install","text":"git clone https://github.com/flyingrobots/wesley.git cd wesley pnpm install","title":"1. Clone and install"},{"location":"quick-start/#2-generate-artifacts","text":"Compile the example schema and operation plans: node packages/wesley-host-node/bin/wesley.mjs generate \\ --schema test/fixtures/examples/schema.graphql \\ --ops test/fixtures/examples/ops \\ --emit-bundle \\ --out-dir out/examples","title":"2. Generate artifacts"},{"location":"quick-start/#3-inspect-the-plan","text":"node packages/wesley-host-node/bin/wesley.mjs plan \\ --schema test/fixtures/examples/schema.graphql \\ --explain","title":"3. Inspect the plan"},{"location":"quick-start/#4-rehearse-dry-run","text":"node packages/wesley-host-node/bin/wesley.mjs rehearse \\ --schema test/fixtures/examples/schema.graphql \\ --dry-run --json This runs the migration plan without touching a database and prints the REALM (verdict) JSON.","title":"4. Rehearse (dry-run)"},{"location":"quick-start/#5-next-steps","text":"Explore the roadmap: docs/roadmap.md Enable Supabase-specific generators: see docs/features/ . Learn about HOLMES scoring: docs/architecture/holmes-architecture.md Need a scripted, showcase flow? Run the BLADE Demo . \u2139\ufe0f Local Postgres fixtures The repo seeds the Dockerised PostgreSQL instance with SQL stored in test/fixtures/postgres/ . Those files are version-controlled so every developer gets the same extensions and baseline objects the first time the container starts.","title":"5. Next steps"},{"location":"reference/","text":"Reference Links \u00b6 Project README: https://github.com/flyingrobots/wesley/blob/main/README.md Delivery Lifecycle: https://github.com/flyingrobots/wesley/blob/main/docs/architecture/lifecycle.md HOLMES Architecture: https://github.com/flyingrobots/wesley/blob/main/docs/architecture/holmes-architecture.md BLADE Demo Guide: https://github.com/flyingrobots/wesley/blob/main/docs/blade.md Roadmap: https://github.com/flyingrobots/wesley/blob/main/docs/roadmap.md Contribution Guide: https://github.com/flyingrobots/wesley/blob/main/CONTRIBUTING.md SECURITY Policy: https://github.com/flyingrobots/wesley/blob/main/SECURITY.md Labels taxonomy: https://github.com/flyingrobots/wesley/blob/main/docs/governance/labels.md","title":"Reference Links"},{"location":"reference/#reference-links","text":"Project README: https://github.com/flyingrobots/wesley/blob/main/README.md Delivery Lifecycle: https://github.com/flyingrobots/wesley/blob/main/docs/architecture/lifecycle.md HOLMES Architecture: https://github.com/flyingrobots/wesley/blob/main/docs/architecture/holmes-architecture.md BLADE Demo Guide: https://github.com/flyingrobots/wesley/blob/main/docs/blade.md Roadmap: https://github.com/flyingrobots/wesley/blob/main/docs/roadmap.md Contribution Guide: https://github.com/flyingrobots/wesley/blob/main/CONTRIBUTING.md SECURITY Policy: https://github.com/flyingrobots/wesley/blob/main/SECURITY.md Labels taxonomy: https://github.com/flyingrobots/wesley/blob/main/docs/governance/labels.md","title":"Reference Links"},{"location":"roadmap/","text":"Roadmap \u00b6 The roadmap is milestone-driven. Each milestone unlocks a cohesive slice of the Transform \u2192 Plan \u2192 Rehearse \u2192 Ship lifecycle. Milestone Summary Go Public Final polish before flipping the repository from private to public. QIR Phase C End-to-end --ops pipeline with translator, identifier safety, docs. Shadow REALM Core wesley shadow lifecycle, docker harness, seed/mask, workload replay. HOLMES Scoring Enhancements Structured metadata, provenance, dashboard improvements. Config & Init wesley.config , env generation, init scaffolding, watch mode refresh. Supabase Platform Storage, Realtime, Edge Function emission + CLI deploy scripts. DDL Planner Phase B Backfill/switch/contract SQL, drift detection, richer QIR output. Frontend Adapters RPC scaffolding for Next.js, Vite/Express, Remix, SvelteKit, Astro, Nuxt. Multi-language Generators Prisma, Drizzle, Nest TypeORM, SQLAlchemy, ActiveRecord, Go ent. DevOps & Docs Polish Docker scaffolding, security/CI hardening, docs site refresh. For the detailed status, release tags, and acceptance criteria see docs/roadmap.md in the repository.","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"The roadmap is milestone-driven. Each milestone unlocks a cohesive slice of the Transform \u2192 Plan \u2192 Rehearse \u2192 Ship lifecycle. Milestone Summary Go Public Final polish before flipping the repository from private to public. QIR Phase C End-to-end --ops pipeline with translator, identifier safety, docs. Shadow REALM Core wesley shadow lifecycle, docker harness, seed/mask, workload replay. HOLMES Scoring Enhancements Structured metadata, provenance, dashboard improvements. Config & Init wesley.config , env generation, init scaffolding, watch mode refresh. Supabase Platform Storage, Realtime, Edge Function emission + CLI deploy scripts. DDL Planner Phase B Backfill/switch/contract SQL, drift detection, richer QIR output. Frontend Adapters RPC scaffolding for Next.js, Vite/Express, Remix, SvelteKit, Astro, Nuxt. Multi-language Generators Prisma, Drizzle, Nest TypeORM, SQLAlchemy, ActiveRecord, Go ent. DevOps & Docs Polish Docker scaffolding, security/CI hardening, docs site refresh. For the detailed status, release tags, and acceptance criteria see docs/roadmap.md in the repository.","title":"Roadmap"},{"location":"scripts/","text":"Workspace Scripts \u00b6 Wesley exposes a handful of pnpm run <script> commands for common workflows. This page mirrors the content in docs/scripts-reference.md so the MkDocs site stays in sync. \u2139\ufe0f Where to run these : Unless noted, execute all scripts from the repository root. Core Workflow Scripts \u00b6 Script Purpose Notes pnpm run build Run build in every workspace package. Uses pnpm -r build ; only packages that define build will execute. pnpm run test Run the full workspace test suite. Equivalent to pnpm -r test . pnpm run test:watch , pnpm run test:coverage Watch mode / coverage runs. Provided where individual packages support them. pnpm run lint , pnpm run lint:fix Repo-wide ESLint checks. The --fix variant applies automatic fixes. pnpm run format , pnpm run format:check Prettier formatting helpers. format rewrites files, format:check ensures compliance. pnpm run validate Runs lint \u2192 format check \u2192 test. Good pre-PR smoke check. pnpm run preflight Docs link validation, dependency boundaries, ESLint core purity, license audit. Mirrors the CI preflight job. pnpm run clean Remove generated artifacts ( out/ , .wesley/ , etc.). See scripts/clean.mjs for the full list. Maintenance & Tooling \u00b6 Script Purpose Notes pnpm run setup:bats-plugins Download/update vendored Bats plugins. Needed for CLI Bats tests (runs automatically inside the devcontainer). pnpm run meta:fix-packages Normalize workspace package.json metadata. Wraps scripts/fix-package-metadata.mjs . pnpm run docker:up , pnpm run docker:down Start/stop the docker-compose stack. Useful for local Postgres testing. pnpm run docker:test Run pgTAP tests inside docker-compose. Executes the pgtap service. Smoke Checks \u00b6 Script Purpose Notes pnpm run smoke:postgres-fixture Start a disposable Postgres container that mounts test/fixtures/postgres/ , verify seeded extensions, then tear down. Ensures the fixture files still apply cleanly. Package-Specific Commands \u00b6 Use pnpm --filter <package> <script> for package-level tasks. Common examples: pnpm --filter @wesley/cli test \u2013 run the CLI Bats suite. pnpm --filter @wesley-core test:unit \u2013 run core unit tests. pnpm --filter @wesley-core test:property \u2013 run property-based tests. Refer to each package\u2019s package.json for the full list of available scripts.","title":"Scripts"},{"location":"scripts/#workspace-scripts","text":"Wesley exposes a handful of pnpm run <script> commands for common workflows. This page mirrors the content in docs/scripts-reference.md so the MkDocs site stays in sync. \u2139\ufe0f Where to run these : Unless noted, execute all scripts from the repository root.","title":"Workspace Scripts"},{"location":"scripts/#core-workflow-scripts","text":"Script Purpose Notes pnpm run build Run build in every workspace package. Uses pnpm -r build ; only packages that define build will execute. pnpm run test Run the full workspace test suite. Equivalent to pnpm -r test . pnpm run test:watch , pnpm run test:coverage Watch mode / coverage runs. Provided where individual packages support them. pnpm run lint , pnpm run lint:fix Repo-wide ESLint checks. The --fix variant applies automatic fixes. pnpm run format , pnpm run format:check Prettier formatting helpers. format rewrites files, format:check ensures compliance. pnpm run validate Runs lint \u2192 format check \u2192 test. Good pre-PR smoke check. pnpm run preflight Docs link validation, dependency boundaries, ESLint core purity, license audit. Mirrors the CI preflight job. pnpm run clean Remove generated artifacts ( out/ , .wesley/ , etc.). See scripts/clean.mjs for the full list.","title":"Core Workflow Scripts"},{"location":"scripts/#maintenance-tooling","text":"Script Purpose Notes pnpm run setup:bats-plugins Download/update vendored Bats plugins. Needed for CLI Bats tests (runs automatically inside the devcontainer). pnpm run meta:fix-packages Normalize workspace package.json metadata. Wraps scripts/fix-package-metadata.mjs . pnpm run docker:up , pnpm run docker:down Start/stop the docker-compose stack. Useful for local Postgres testing. pnpm run docker:test Run pgTAP tests inside docker-compose. Executes the pgtap service.","title":"Maintenance &amp; Tooling"},{"location":"scripts/#smoke-checks","text":"Script Purpose Notes pnpm run smoke:postgres-fixture Start a disposable Postgres container that mounts test/fixtures/postgres/ , verify seeded extensions, then tear down. Ensures the fixture files still apply cleanly.","title":"Smoke Checks"},{"location":"scripts/#package-specific-commands","text":"Use pnpm --filter <package> <script> for package-level tasks. Common examples: pnpm --filter @wesley/cli test \u2013 run the CLI Bats suite. pnpm --filter @wesley-core test:unit \u2013 run core unit tests. pnpm --filter @wesley-core test:property \u2013 run property-based tests. Refer to each package\u2019s package.json for the full list of available scripts.","title":"Package-Specific Commands"}]}