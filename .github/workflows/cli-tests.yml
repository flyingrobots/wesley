name: Wesley CLI Tests

on:
  push:
    branches: [ main, dev, 'feat/*', 'fix/*' ]
    paths:
      - 'packages/wesley-cli/**'
      - 'packages/wesley-core/**'
      - 'packages/wesley-host-node/**'
      - '.github/workflows/cli-tests.yml'
  pull_request:
    paths:
      - 'packages/wesley-cli/**'
      - 'packages/wesley-core/**'
      - 'packages/wesley-host-node/**'
      - '.github/workflows/cli-tests.yml'

env:
  FORCE_COLOR: 1

jobs:
  cli-tests:
    name: CLI End-to-End Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive  # For Bats plugins

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install Bats (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Install Bats from GitHub releases (more reliable than apt)
        curl -LO https://github.com/bats-core/bats-core/archive/v1.12.0.tar.gz
        tar -xzf v1.12.0.tar.gz
        sudo ./bats-core-1.12.0/install.sh /usr/local
        echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Install Bats (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install bats-core

    - name: Verify Bats installation
      run: |
        bats --version
        which bats

    - name: Install dependencies
      run: |
        pnpm install --no-frozen-lockfile

    - name: Install Bats plugins (assert/support/file)
      run: |
        set -euo pipefail
        PLUGDIR="packages/wesley-cli/test/bats-plugins"
        mkdir -p "$PLUGDIR"
        git clone --depth=1 https://github.com/bats-core/bats-support "$PLUGDIR/bats-support" || true
        git clone --depth=1 https://github.com/bats-core/bats-assert "$PLUGDIR/bats-assert" || true
        git clone --depth=1 https://github.com/bats-core/bats-file "$PLUGDIR/bats-file" || true

    - name: Build packages
      run: |
        pnpm --filter @wesley/core build || echo "No build script for core"
        pnpm --filter @wesley/host-node build || echo "No build script for host-node"

    - name: Initialize git repository for CLI tests
      run: |
        # CLI tests expect git repo for SHA calculation
        cd packages/wesley-cli
        git init .
        git config user.name "CI Test"
        git config user.email "test@ci.com"
        git add .
        git commit -m "CI test commit" || echo "Nothing to commit"

    - name: Run CLI tests
      run: |
        cd packages/wesley-cli
        pnpm test

    - name: Run CLI tests with TAP output
      run: |
        cd packages/wesley-cli
        pnpm test:tap > cli-test-results.tap

    - name: Upload TAP test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cli-test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: packages/wesley-cli/cli-test-results.tap

    - name: Run CLI tests with verbose output (on failure)
      if: failure()
      run: |
        cd packages/wesley-cli
        echo "=== VERBOSE TEST OUTPUT ==="
        pnpm test:verbose || true
        echo ""
        echo "=== CLI MANUAL TEST ==="
        node ../wesley-host-node/bin/wesley.mjs --version
        node ../wesley-host-node/bin/wesley.mjs --help
        echo 'type Query { hello: String }' | node ../wesley-host-node/bin/wesley.mjs generate --schema - --json --quiet || echo "Expected to fail with stub parser"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: cli-tests
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.cli-tests.result }}" == "success" ]]; then
          echo "✅ All CLI tests passed across all environments!"
          echo "::notice title=Tests Passed::All CLI end-to-end tests completed successfully"
        else
          echo "❌ Some CLI tests failed"
          echo "::error title=Tests Failed::CLI end-to-end tests failed in one or more environments"
          exit 1
        fi
