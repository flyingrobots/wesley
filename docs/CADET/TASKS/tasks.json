{
  "version": "1.0.0",
  "timestamp": "2025-01-02T00:00:00Z",
  "tasks": {
    "WP1.T001": {
      "id": "WP1.T001",
      "feature": "WP1",
      "name": "Create DDLPlanner with lock classification",
      "description": "Implement planner that classifies DDL operations by PostgreSQL lock levels",
      "effort_hours": 8,
      "confidence": 0.8,
      "dependencies": [],
      "inputs": ["GraphQL schema", "Wesley IR"],
      "outputs": ["DDL execution plan", "Lock level annotations"],
      "acceptance_criteria": [
        "All DDL operations classified correctly",
        "Lock levels match PostgreSQL documentation",
        "CIC operations marked for non-transactional phase"
      ],
      "implementation_notes": "Use lock hierarchy: ACCESS SHARE → ROW SHARE → ROW EXCLUSIVE → SHARE UPDATE EXCLUSIVE → SHARE → SHARE ROW EXCLUSIVE → EXCLUSIVE → ACCESS EXCLUSIVE",
      "test_approach": "Unit tests with known DDL patterns",
      "risk": "Complex lock interactions in partitioned tables"
    },
    "WP1.T002": {
      "id": "WP1.T002",
      "feature": "WP1",
      "name": "Implement SQLExecutor with streaming",
      "description": "Create executor that streams SQL to psql without loading entire schema in memory",
      "effort_hours": 8,
      "confidence": 0.75,
      "dependencies": ["WP1.T001"],
      "inputs": ["DDL execution plan"],
      "outputs": ["Executed SQL", "Progress events"],
      "acceptance_criteria": [
        "SQL streams to psql stdin",
        "No full schema in memory",
        "Progress reported per operation",
        "Handles psql exit codes correctly"
      ],
      "implementation_notes": "Use Node.js streams and child_process.spawn for psql",
      "test_approach": "Integration tests with real PostgreSQL",
      "risk": "Buffer management complexity"
    },
    "WP1.T003": {
      "id": "WP1.T003",
      "feature": "WP1",
      "name": "Add transaction-scoped advisory locks",
      "description": "Implement pg_advisory_xact_lock to prevent concurrent migrations",
      "effort_hours": 4,
      "confidence": 0.9,
      "dependencies": ["WP1.T002"],
      "inputs": ["Migration identifier"],
      "outputs": ["Lock acquisition SQL"],
      "acceptance_criteria": [
        "Uses SHA256 for stable key generation",
        "Lock auto-releases on commit/rollback",
        "Prevents concurrent migrations",
        "No hashtext() usage"
      ],
      "implementation_notes": "Key generation: ('x' || substr(digest('wesley:001', 'sha256')::text, 1, 16))::bit(64)::bigint",
      "test_approach": "Concurrent execution tests",
      "risk": "Lock key collision possibility"
    },
    "WP1.T004": {
      "id": "WP1.T004",
      "feature": "WP1",
      "name": "Implement SET LOCAL timeout handling",
      "description": "Configure transaction-local timeouts for DDL operations",
      "effort_hours": 2,
      "confidence": 0.95,
      "dependencies": ["WP1.T002"],
      "inputs": ["Timeout configuration"],
      "outputs": ["SET LOCAL statements"],
      "acceptance_criteria": [
        "Uses SET LOCAL not psql -v",
        "lock_timeout and statement_timeout set",
        "Timeouts reset after transaction",
        "Configurable values"
      ],
      "implementation_notes": "SET LOCAL lock_timeout = '5s'; SET LOCAL statement_timeout = '30s';",
      "test_approach": "Verify timeout behavior",
      "risk": "Low - well understood pattern"
    },
    "WP1.T005": {
      "id": "WP1.T005",
      "feature": "WP1",
      "name": "Create CheckpointManager base",
      "description": "Implement checkpoint storage and recovery system",
      "effort_hours": 6,
      "confidence": 0.7,
      "dependencies": [],
      "inputs": ["Execution state"],
      "outputs": ["Checkpoint files", "Recovery capability"],
      "acceptance_criteria": [
        "State serialized to filesystem",
        "Atomic writes guaranteed",
        "Recovery from any checkpoint",
        "Cleanup after completion"
      ],
      "implementation_notes": "JSON format with versioning, atomic rename pattern",
      "test_approach": "Failure injection tests",
      "risk": "State consistency during failure"
    },
    "WP1.T006": {
      "id": "WP1.T006",
      "feature": "WP1",
      "name": "Add MigrationExplainer with lock levels",
      "description": "Create explainer that shows lock impact of migrations",
      "effort_hours": 4,
      "confidence": 0.85,
      "dependencies": ["WP1.T001"],
      "inputs": ["DDL execution plan"],
      "outputs": ["Human-readable explanation", "Lock level report"],
      "acceptance_criteria": [
        "Shows lock level per operation",
        "Indicates blocking potential",
        "Time estimates included",
        "Markdown formatted output"
      ],
      "implementation_notes": "Table format with operation, lock level, blocks reads, blocks writes",
      "test_approach": "Snapshot tests for output",
      "risk": "Time estimation accuracy"
    },
    "WP1.T007": {
      "id": "WP1.T007",
      "feature": "WP1",
      "name": "Implement CIC orchestration rules",
      "description": "Enforce CREATE INDEX CONCURRENTLY execution rules",
      "effort_hours": 6,
      "confidence": 0.8,
      "dependencies": ["WP1.T001"],
      "inputs": ["Index creation statements"],
      "outputs": ["Orchestrated CIC operations"],
      "acceptance_criteria": [
        "CIC runs outside transactions",
        "One CIC per table at a time",
        "Proper error handling",
        "Progress tracking"
      ],
      "implementation_notes": "Must detect table locks before CIC execution",
      "test_approach": "Concurrent index creation tests",
      "risk": "Complex orchestration logic"
    },
    "WP1.T008": {
      "id": "WP1.T008",
      "feature": "WP1",
      "name": "Add partitioned table index handling",
      "description": "Special handling for indexes on partitioned tables",
      "effort_hours": 8,
      "confidence": 0.7,
      "dependencies": ["WP1.T007"],
      "inputs": ["Partitioned table schema"],
      "outputs": ["Parent and partition index SQL"],
      "acceptance_criteria": [
        "Parent index created with ONLY",
        "Partition indexes use CIC",
        "Indexes attached correctly",
        "Parent becomes valid automatically"
      ],
      "implementation_notes": "CREATE INDEX ON ONLY parent; CIC on each partition; ALTER INDEX ATTACH PARTITION",
      "test_approach": "Partitioned table tests",
      "risk": "Partition discovery complexity"
    },
    "WP2.T001": {
      "id": "WP2.T001",
      "feature": "WP2",
      "name": "Implement NOT VALID pattern for FKs",
      "description": "Two-phase foreign key addition to avoid locking",
      "effort_hours": 6,
      "confidence": 0.85,
      "dependencies": ["WP1.T001", "WP1.T002"],
      "inputs": ["Foreign key constraints"],
      "outputs": ["NOT VALID SQL", "Validation SQL"],
      "acceptance_criteria": [
        "FK added with NOT VALID",
        "Validation scheduled separately",
        "Partitioned table detection",
        "Rollback scripts generated"
      ],
      "implementation_notes": "Partitioned tables can't use NOT VALID on FKs",
      "test_approach": "FK addition without blocking",
      "risk": "Partition handling edge cases"
    },
    "WP2.T002": {
      "id": "WP2.T002",
      "feature": "WP2",
      "name": "Add validation phase scheduling",
      "description": "Schedule constraint validation for low traffic windows",
      "effort_hours": 4,
      "confidence": 0.8,
      "dependencies": ["WP2.T001"],
      "inputs": ["Validation operations", "Schedule config"],
      "outputs": ["Scheduled validation plan"],
      "acceptance_criteria": [
        "Configurable validation windows",
        "Time estimates provided",
        "Priority ordering",
        "Progress tracking"
      ],
      "implementation_notes": "VALIDATE CONSTRAINT uses SHARE UPDATE EXCLUSIVE lock",
      "test_approach": "Scheduling logic tests",
      "risk": "Window estimation accuracy"
    },
    "WP2.T003": {
      "id": "WP2.T003",
      "feature": "WP2",
      "name": "Create unique constraint via index pattern",
      "description": "Build unique index first, then attach as constraint",
      "effort_hours": 5,
      "confidence": 0.9,
      "dependencies": ["WP1.T007"],
      "inputs": ["Unique constraints"],
      "outputs": ["CIC unique index", "Constraint attachment SQL"],
      "acceptance_criteria": [
        "Unique index built with CIC",
        "Constraint attached instantly",
        "No table locking",
        "Rollback capability"
      ],
      "implementation_notes": "CREATE UNIQUE INDEX CONCURRENTLY; ALTER TABLE ADD CONSTRAINT USING INDEX",
      "test_approach": "Unique constraint tests",
      "risk": "Low - well understood"
    },
    "WP2.T004": {
      "id": "WP2.T004",
      "feature": "WP2",
      "name": "Implement instant column default detection",
      "description": "Detect PG11+ instant default capability for constants",
      "effort_hours": 4,
      "confidence": 0.85,
      "dependencies": ["WP1.T001"],
      "inputs": ["Column defaults", "PG version"],
      "outputs": ["Instant vs batched decision"],
      "acceptance_criteria": [
        "Version detection accurate",
        "Constant defaults instant on PG11+",
        "Volatile defaults use batching",
        "Fallback for older versions"
      ],
      "implementation_notes": "Check pg_catalog.pg_attribute.atthasmissing",
      "test_approach": "Version-specific tests",
      "risk": "Version detection reliability"
    },
    "WP2.T005": {
      "id": "WP2.T005",
      "feature": "WP2",
      "name": "Add shadow column strategy for type changes",
      "description": "Safe column type migration without locking",
      "effort_hours": 8,
      "confidence": 0.75,
      "dependencies": ["WP1.T001", "WP1.T002"],
      "inputs": ["Type change operations"],
      "outputs": ["Shadow column migration plan"],
      "acceptance_criteria": [
        "New column added without lock",
        "Dual-write trigger created",
        "Backfill in batches",
        "Atomic switchover"
      ],
      "implementation_notes": "Add new column, backfill, trigger for dual writes, switch atomically",
      "test_approach": "Type migration tests",
      "risk": "Trigger complexity"
    },
    "WP2.T006": {
      "id": "WP2.T006",
      "feature": "WP2",
      "name": "Create circular FK handling with DEFERRABLE",
      "description": "Handle circular foreign key dependencies",
      "effort_hours": 4,
      "confidence": 0.8,
      "dependencies": ["WP2.T001"],
      "inputs": ["Circular FK relationships"],
      "outputs": ["DEFERRABLE FK constraints"],
      "acceptance_criteria": [
        "Circular dependencies detected",
        "DEFERRABLE INITIALLY DEFERRED used",
        "Insert order preserved",
        "Validation at commit"
      ],
      "implementation_notes": "Tables created first, FKs added as DEFERRABLE",
      "test_approach": "Circular dependency tests",
      "risk": "Detection algorithm complexity"
    },
    "WP2.T007": {
      "id": "WP2.T007",
      "feature": "WP2",
      "name": "Add computed column trigger generation",
      "description": "Generate triggers for cross-table computed columns",
      "effort_hours": 6,
      "confidence": 0.75,
      "dependencies": ["WP1.T001"],
      "inputs": ["Computed column definitions"],
      "outputs": ["Trigger functions", "Trigger DDL"],
      "acceptance_criteria": [
        "Same-row GENERATED supported",
        "Cross-table triggers created",
        "Update cascading works",
        "Performance acceptable"
      ],
      "implementation_notes": "GENERATED for same-row, triggers for cross-table",
      "test_approach": "Computed column tests",
      "risk": "Trigger performance impact"
    },
    "WP3.T001": {
      "id": "WP3.T001",
      "feature": "WP3",
      "name": "Integrate chokidar for watch mode",
      "description": "File watcher for automatic recompilation",
      "effort_hours": 4,
      "confidence": 0.9,
      "dependencies": [],
      "inputs": ["File paths", "Watch config"],
      "outputs": ["File change events"],
      "acceptance_criteria": [
        "Changes detected < 200ms",
        "Debouncing implemented",
        "Atomic saves handled",
        "Configurable excludes"
      ],
      "implementation_notes": "Use chokidar with awaitWriteFinish option",
      "test_approach": "File change detection tests",
      "risk": "Platform-specific behavior"
    },
    "WP3.T002": {
      "id": "WP3.T002",
      "feature": "WP3",
      "name": "Add GraphQL ESLint with rules",
      "description": "Integrate GraphQL linting into build pipeline",
      "effort_hours": 3,
      "confidence": 0.95,
      "dependencies": [],
      "inputs": ["GraphQL schemas"],
      "outputs": ["Lint results"],
      "acceptance_criteria": [
        "ESLint plugin configured",
        "Custom rules added",
        "CI integration working",
        "Auto-fix available"
      ],
      "implementation_notes": "@graphql-eslint/eslint-plugin",
      "test_approach": "Lint rule tests",
      "risk": "Low - standard tooling"
    },
    "WP3.T003": {
      "id": "WP3.T003",
      "feature": "WP3",
      "name": "Configure GraphQL Code Generator",
      "description": "Setup TypeScript type generation from GraphQL",
      "effort_hours": 4,
      "confidence": 0.9,
      "dependencies": [],
      "inputs": ["GraphQL schemas"],
      "outputs": ["TypeScript types"],
      "acceptance_criteria": [
        "Types match schema exactly",
        "Custom scalars mapped",
        "Enums as const objects",
        "Tree-shaking friendly"
      ],
      "implementation_notes": "@graphql-codegen/cli with typescript plugin",
      "test_approach": "Type correctness tests",
      "risk": "Custom scalar complexity"
    },
    "WP3.T004": {
      "id": "WP3.T004",
      "feature": "WP3",
      "name": "Add Zod generation plugin",
      "description": "Generate runtime validators from GraphQL schema",
      "effort_hours": 3,
      "confidence": 0.85,
      "dependencies": ["WP3.T003"],
      "inputs": ["GraphQL schemas"],
      "outputs": ["Zod validators"],
      "acceptance_criteria": [
        "All inputs have validators",
        "Custom scalars handled",
        "Composable schemas",
        "Type inference works"
      ],
      "implementation_notes": "@use-pico/graphql-codegen-zod",
      "test_approach": "Validation tests",
      "risk": "Plugin compatibility"
    },
    "WP3.T005": {
      "id": "WP3.T005",
      "feature": "WP3",
      "name": "Create schema drift detector",
      "description": "Runtime validation of schema state vs compiled",
      "effort_hours": 6,
      "confidence": 0.8,
      "dependencies": ["WP1.T001"],
      "inputs": ["Compiled schema hash", "Runtime schema"],
      "outputs": ["Drift report"],
      "acceptance_criteria": [
        "Deterministic hash algorithm",
        "Clear drift reporting",
        "Fix suggestions provided",
        "CI/CD integration"
      ],
      "implementation_notes": "Hash schema structure, compare at runtime",
      "test_approach": "Drift detection tests",
      "risk": "Hash stability across versions"
    },
    "WP3.T006": {
      "id": "WP3.T006",
      "feature": "WP3",
      "name": "Implement --explain mode",
      "description": "Show migration impact without execution",
      "effort_hours": 4,
      "confidence": 0.85,
      "dependencies": ["WP1.T006"],
      "inputs": ["Migration plan"],
      "outputs": ["Impact report"],
      "acceptance_criteria": [
        "Lock levels shown",
        "Time estimates provided",
        "Risk score calculated",
        "Resource conflicts identified"
      ],
      "implementation_notes": "Reuse MigrationExplainer output",
      "test_approach": "Report format tests",
      "risk": "Estimation accuracy"
    },
    "WP3.T007": {
      "id": "WP3.T007",
      "feature": "WP3",
      "name": "Add --dry-run with full SQL",
      "description": "Generate complete SQL without execution",
      "effort_hours": 2,
      "confidence": 0.95,
      "dependencies": ["WP1.T002"],
      "inputs": ["Migration plan"],
      "outputs": ["SQL script"],
      "acceptance_criteria": [
        "Complete SQL generated",
        "No database connection",
        "Comments included",
        "Rollback script available"
      ],
      "implementation_notes": "Stream to file instead of psql",
      "test_approach": "SQL generation tests",
      "risk": "Low - output redirect"
    },
    "WP3.T008": {
      "id": "WP3.T008",
      "feature": "WP3",
      "name": "Create progress monitoring",
      "description": "Real-time progress tracking during migration",
      "effort_hours": 4,
      "confidence": 0.85,
      "dependencies": ["WP1.T002"],
      "inputs": ["Execution events"],
      "outputs": ["Progress display"],
      "acceptance_criteria": [
        "Operation-level progress",
        "Time elapsed shown",
        "ETA calculation",
        "Spinner/progress bar"
      ],
      "implementation_notes": "Event-driven with throttled updates",
      "test_approach": "Progress tracking tests",
      "risk": "UI complexity"
    },
    "WP4.T001": {
      "id": "WP4.T001",
      "feature": "WP4",
      "name": "Implement dead column detector",
      "description": "Analyze pg_stat_statements for unused columns",
      "effort_hours": 8,
      "confidence": 0.7,
      "dependencies": [],
      "inputs": ["pg_stat_statements data"],
      "outputs": ["Dead column report"],
      "acceptance_criteria": [
        "Query normalization handled",
        "Confidence levels assigned",
        "JSON report generated",
        "False positive rate < 5%"
      ],
      "implementation_notes": "Parse normalized queries, track column references",
      "test_approach": "Query analysis tests",
      "risk": "Parser complexity"
    },
    "WP4.T002": {
      "id": "WP4.T002",
      "feature": "WP4",
      "name": "Add resource bottleneck analysis",
      "description": "Identify resource conflicts in migration plan",
      "effort_hours": 6,
      "confidence": 0.75,
      "dependencies": ["WP1.T001"],
      "inputs": ["Migration plan"],
      "outputs": ["Bottleneck report"],
      "acceptance_criteria": [
        "Database locks identified",
        "Memory usage estimated",
        "I/O bottlenecks found",
        "Suggestions provided"
      ],
      "implementation_notes": "Analyze operation dependencies and resource needs",
      "test_approach": "Resource analysis tests",
      "risk": "Estimation accuracy"
    },
    "WP4.T003": {
      "id": "WP4.T003",
      "feature": "WP4",
      "name": "Create checkpoint recovery system",
      "description": "Full checkpoint and recovery implementation",
      "effort_hours": 8,
      "confidence": 0.75,
      "dependencies": ["WP1.T005"],
      "inputs": ["Failed migration state"],
      "outputs": ["Resumed migration"],
      "acceptance_criteria": [
        "Resume from any checkpoint",
        "State consistency verified",
        "Rollback possible",
        "Cleanup automated"
      ],
      "implementation_notes": "Extend CheckpointManager with recovery logic",
      "test_approach": "Failure injection tests",
      "risk": "State corruption handling"
    },
    "WP4.T004": {
      "id": "WP4.T004",
      "feature": "WP4",
      "name": "Add migration rollback generation",
      "description": "Generate compensating operations for rollback",
      "effort_hours": 6,
      "confidence": 0.8,
      "dependencies": ["WP1.T001"],
      "inputs": ["Migration operations"],
      "outputs": ["Rollback script"],
      "acceptance_criteria": [
        "All operations reversible",
        "Data preservation handled",
        "Order correctly reversed",
        "Warnings for data loss"
      ],
      "implementation_notes": "Generate inverse operations where possible",
      "test_approach": "Rollback verification tests",
      "risk": "Irreversible operations"
    },
    "WP4.T005": {
      "id": "WP4.T005",
      "feature": "WP4",
      "name": "Implement backfill batching",
      "description": "Batch large data updates to avoid locks",
      "effort_hours": 5,
      "confidence": 0.85,
      "dependencies": ["WP2.T004"],
      "inputs": ["Backfill operations"],
      "outputs": ["Batched UPDATE SQL"],
      "acceptance_criteria": [
        "Configurable batch size",
        "Progress tracking",
        "Resume capability",
        "Lock time minimized"
      ],
      "implementation_notes": "UPDATE with LIMIT and ordering",
      "test_approach": "Batch execution tests",
      "risk": "Batch boundary handling"
    },
    "WP4.T006": {
      "id": "WP4.T006",
      "feature": "WP4",
      "name": "Create validation window scheduler",
      "description": "Schedule constraint validations for optimal times",
      "effort_hours": 4,
      "confidence": 0.8,
      "dependencies": ["WP2.T002"],
      "inputs": ["Validation operations", "Traffic patterns"],
      "outputs": ["Optimized schedule"],
      "acceptance_criteria": [
        "Traffic patterns analyzed",
        "Windows identified",
        "Priority respected",
        "Manual override available"
      ],
      "implementation_notes": "Cron-like scheduling with priority queue",
      "test_approach": "Scheduling algorithm tests",
      "risk": "Traffic prediction accuracy"
    },
    "WP5.T001": {
      "id": "WP5.T001",
      "feature": "WP5",
      "name": "Add property-based tests with fast-check",
      "description": "Fuzz testing for edge case discovery",
      "effort_hours": 6,
      "confidence": 0.85,
      "dependencies": [],
      "inputs": ["Generator functions"],
      "outputs": ["Property tests"],
      "acceptance_criteria": [
        "Random schemas generated",
        "Round-trip stability verified",
        "Shrinking implemented",
        "1000+ cases tested"
      ],
      "implementation_notes": "fast-check arbitraries for GraphQL schemas",
      "test_approach": "Property test verification",
      "risk": "Test complexity"
    },
    "WP5.T002": {
      "id": "WP5.T002",
      "feature": "WP5",
      "name": "Create snapshot tests with Vitest",
      "description": "Golden file testing for output stability",
      "effort_hours": 4,
      "confidence": 0.9,
      "dependencies": [],
      "inputs": ["Generator outputs"],
      "outputs": ["Snapshot tests"],
      "acceptance_criteria": [
        "All generators covered",
        "Snapshots version controlled",
        "Update mechanism clear",
        "CI validation working"
      ],
      "implementation_notes": "Vitest snapshot testing",
      "test_approach": "Snapshot comparison",
      "risk": "False positives"
    },
    "WP5.T003": {
      "id": "WP5.T003",
      "feature": "WP5",
      "name": "Add SQL round-trip validation",
      "description": "Verify SQL can be parsed back to AST",
      "effort_hours": 5,
      "confidence": 0.8,
      "dependencies": [],
      "inputs": ["Generated SQL"],
      "outputs": ["Validation results"],
      "acceptance_criteria": [
        "SQL parses without error",
        "AST matches expected",
        "All features covered",
        "Performance acceptable"
      ],
      "implementation_notes": "pgsql-parser for validation",
      "test_approach": "Round-trip tests",
      "risk": "Parser limitations"
    },
    "WP5.T004": {
      "id": "WP5.T004",
      "feature": "WP5",
      "name": "Create integration test suite",
      "description": "End-to-end tests with real PostgreSQL",
      "effort_hours": 6,
      "confidence": 0.85,
      "dependencies": ["WP1", "WP2", "WP3"],
      "inputs": ["Test schemas"],
      "outputs": ["Integration tests"],
      "acceptance_criteria": [
        "Real database used",
        "All features tested",
        "Cleanup automated",
        "CI compatible"
      ],
      "implementation_notes": "Docker PostgreSQL for tests",
      "test_approach": "End-to-end verification",
      "risk": "Environment setup"
    },
    "WP5.T005": {
      "id": "WP5.T005",
      "feature": "WP5",
      "name": "Add performance benchmarks",
      "description": "Measure and track performance metrics",
      "effort_hours": 4,
      "confidence": 0.85,
      "dependencies": [],
      "inputs": ["Benchmark scenarios"],
      "outputs": ["Performance reports"],
      "acceptance_criteria": [
        "Key metrics tracked",
        "Regression detection",
        "CI integration",
        "Historical tracking"
      ],
      "implementation_notes": "Vitest bench or benchmark.js",
      "test_approach": "Performance measurement",
      "risk": "Environment variability"
    },
    "WP6.T001": {
      "id": "WP6.T001",
      "feature": "WP6",
      "name": "Split SQLAst.mjs into 18 files",
      "description": "Refactor multi-class file following SRP",
      "effort_hours": 4,
      "confidence": 0.95,
      "dependencies": [],
      "inputs": ["SQLAst.mjs with 18 classes"],
      "outputs": ["18 separate class files"],
      "acceptance_criteria": [
        "One class per file",
        "Imports updated",
        "Tests still pass",
        "No functionality change"
      ],
      "implementation_notes": "Mechanical refactoring, update all imports",
      "test_approach": "Existing tests verify",
      "risk": "Import path errors"
    },
    "WP6.T002": {
      "id": "WP6.T002",
      "feature": "WP6",
      "name": "Split Commands.mjs into 12 files",
      "description": "Refactor command classes into separate files",
      "effort_hours": 3,
      "confidence": 0.95,
      "dependencies": [],
      "inputs": ["Commands.mjs with 12 classes"],
      "outputs": ["12 separate command files"],
      "acceptance_criteria": [
        "One class per file",
        "Command pattern preserved",
        "Tests updated",
        "Documentation added"
      ],
      "implementation_notes": "Create commands/ directory structure",
      "test_approach": "Existing tests verify",
      "risk": "Low - mechanical"
    },
    "WP6.T003": {
      "id": "WP6.T003",
      "feature": "WP6",
      "name": "Split Events.mjs into 15 files",
      "description": "Refactor event classes following SRP",
      "effort_hours": 3,
      "confidence": 0.95,
      "dependencies": [],
      "inputs": ["Events.mjs with 15 classes"],
      "outputs": ["15 separate event files"],
      "acceptance_criteria": [
        "One class per file",
        "Event hierarchy preserved",
        "Tests pass",
        "Imports updated"
      ],
      "implementation_notes": "Create events/ directory",
      "test_approach": "Existing tests verify",
      "risk": "Import complexity"
    },
    "WP6.T004": {
      "id": "WP6.T004",
      "feature": "WP6",
      "name": "Add JSDoc to all public APIs",
      "description": "Document all public methods and classes",
      "effort_hours": 3,
      "confidence": 0.9,
      "dependencies": ["WP6.T001", "WP6.T002", "WP6.T003"],
      "inputs": ["Undocumented APIs"],
      "outputs": ["JSDoc comments"],
      "acceptance_criteria": [
        "All public APIs documented",
        "Parameter types specified",
        "Return types documented",
        "Examples included"
      ],
      "implementation_notes": "Standard JSDoc format",
      "test_approach": "Documentation linting",
      "risk": "Time consuming"
    },
    "WP6.T005": {
      "id": "WP6.T005",
      "feature": "WP6",
      "name": "Update all imports",
      "description": "Fix import paths after refactoring",
      "effort_hours": 2,
      "confidence": 0.9,
      "dependencies": ["WP6.T001", "WP6.T002", "WP6.T003"],
      "inputs": ["New file structure"],
      "outputs": ["Updated imports"],
      "acceptance_criteria": [
        "All imports resolved",
        "No circular dependencies",
        "Tests pass",
        "Build succeeds"
      ],
      "implementation_notes": "May need import maps",
      "test_approach": "Build verification",
      "risk": "Circular dependencies"
    }
  },
  "metrics": {
    "total_tasks": 48,
    "total_effort": 180,
    "average_confidence": 0.84,
    "critical_path_tasks": 12,
    "high_risk_tasks": 8,
    "parallelizable_tasks": 22
  }
}