#!/usr/bin/env node
/**
 * SHA-lock HOLMES CLI - Sidecar intelligence for Wesley
 */

import { readFileSync, writeFileSync } from 'node:fs';
import { Command } from 'commander';
import { Holmes } from './Holmes.mjs';
import { Watson } from './Watson.mjs';
import { Moriarty } from './Moriarty.mjs';
import { readWeightConfig } from './weight-config.mjs';
import {
  holmesReportSchema,
  watsonReportSchema,
  moriartyReportSchema,
  validateReport
} from './report-schemas.mjs';

function loadBundle() {
  try {
    return JSON.parse(readFileSync('.wesley/bundle.json', 'utf8'));
  } catch (error) {
    const message = error?.code === 'ENOENT'
      ? 'No Wesley bundle found. Run "wesley generate --emit-bundle" first.'
      : 'Unable to read .wesley/bundle.json';
    throw new Error(message);
  }
}

function loadHistory() {
  try {
    return JSON.parse(readFileSync('.wesley/history.json', 'utf8'));
  } catch {
    return { points: [] };
  }
}

function ensureValidReport(label, schema, data) {
  const { valid, errors } = validateReport(schema, data);
  if (!valid) {
    const detail = errors.map(err => ` - ${err}`).join('\n');
    throw new Error(`[${label}] report validation failed:\n${detail}`);
  }
}

async function main() {
  const program = new Command();

  program
    .name('holmes')
    .description('SHA-lock HOLMES - Wesley Schema Intelligence')
    .addHelpText('before', '\nSHA-lock HOLMES - Wesley Schema Intelligence\n')
    .showHelpAfterError()
    .addHelpText('after', `
Requires:
  .wesley/bundle.json   Generated by: wesley generate --emit-bundle
  .wesley/history.json  Built over time by multiple generations

"When you have eliminated the impossible, whatever remains,
 however improbable, must be the deployable."`);

  program
    .command('investigate')
    .description('Run HOLMES investigation on .wesley/bundle')
    .option('--json <file>', 'Write investigation JSON to file')
    .action(options => {
      const bundle = loadBundle();
      const holmes = new Holmes(bundle);
      const data = holmes.investigationData();
      ensureValidReport('HOLMES', holmesReportSchema, data);
      if (options.json) {
        writeFileSync(options.json, JSON.stringify(data, null, 2));
      }
      console.log(holmes.renderInvestigation(data));
    });

  program
    .command('verify')
    .description('Run WATSON verification')
    .option('--json <file>', 'Write verification JSON to file')
    .action(options => {
      const bundle = loadBundle();
      const watson = new Watson(bundle);
      const data = watson.verificationData();
      ensureValidReport('WATSON', watsonReportSchema, data);
      if (options.json) {
        writeFileSync(options.json, JSON.stringify(data, null, 2));
      }
      console.log(watson.renderVerification(data));
    });

  program
    .command('predict')
    .description('Run MORIARTY predictions')
    .option('--json <file>', 'Write prediction JSON to file')
    .action(options => {
      const history = loadHistory();
      const moriarty = new Moriarty(history);
      const data = moriarty.predictionData();
      ensureValidReport('MORIARTY', moriartyReportSchema, data);
      if (options.json) {
        writeFileSync(options.json, JSON.stringify(data, null, 2));
      }
      console.log(moriarty.renderPrediction(data));
    });

  program
    .command('report')
    .description('Generate combined HOLMES, WATSON, and MORIARTY report')
    .option('--json <file>', 'Write combined JSON to file')
    .action(options => {
      const bundle = loadBundle();
      const history = loadHistory();
      const holmes = new Holmes(bundle);
      const watson = new Watson(bundle);
      const moriarty = new Moriarty(history);
      const holmesData = holmes.investigationData();
      const watsonData = watson.verificationData();
      const moriartyData = moriarty.predictionData();

      ensureValidReport('HOLMES', holmesReportSchema, holmesData);
      ensureValidReport('WATSON', watsonReportSchema, watsonData);
      ensureValidReport('MORIARTY', moriartyReportSchema, moriartyData);

      if (options.json) {
        writeFileSync(options.json, JSON.stringify({
          holmes: holmesData,
          watson: watsonData,
          moriarty: moriartyData
        }, null, 2));
      }

      console.log('# The Case of Schema Investigation\n');
      console.log(holmes.renderInvestigation(holmesData));
      console.log('\n---\n');
      console.log(watson.renderVerification(watsonData));
      console.log('\n---\n');
      console.log(moriarty.renderPrediction(moriartyData));
    });

  program
    .command('weights')
    .aliases(['weights:validate', 'weights-validate'])
    .description('Validate .wesley/weights.json structure')
    .argument('[target]', 'Path to weights configuration')
    .option('-f, --file <file>', 'Path to weights configuration')
    .option('--json <file>', 'Write weights JSON to file')
    .action((targetArg, options) => {
      const target = options.file || targetArg || '.wesley/weights.json';
      try {
        const { config } = readWeightConfig(target, { required: true });
        // eslint-disable-next-line no-console
        console.log('weights configuration valid');
        if (options.json) {
          writeFileSync(options.json, JSON.stringify(config, null, 2));
        }
      } catch (error) {
        throw new Error(`Weight configuration invalid: ${error?.message ?? 'unknown error'}`);
      }
    });

  await program.parseAsync(process.argv);
}

main().catch(error => {
  console.error('Investigation failed:', error.message);
  process.exit(1);
});
