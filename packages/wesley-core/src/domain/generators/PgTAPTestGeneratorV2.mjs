/**
 * Enhanced pgTAP Test Generator V2
 * Comprehensive testing including RLS, negative tests, and sensitive field handling
 */

export class PgTAPTestGeneratorV2 {
  constructor(evidenceMap) {
    this.evidenceMap = evidenceMap;
  }

  async generate(schema, options = {}) {
    const tests = [];
    
    // Add test header
    tests.push(this.generateHeader());
    
    // Structure tests
    tests.push(this.generateStructureTests(schema));
    
    // Constraint tests
    tests.push(this.generateConstraintTests(schema));
    
    // Enhanced RLS tests with per-operation coverage
    tests.push(this.generateEnhancedRLSTests(schema));
    
    // Sensitive field tests
    tests.push(this.generateSensitiveFieldTests(schema));
    
    // Negative tests for unauthorized access
    tests.push(this.generateNegativeTests(schema));
    
    return tests.filter(Boolean).join('\n\n');
  }
  
  generateHeader() {
    return `-- pgTAP Tests Generated by Wesley
-- Enhanced with RLS per-operation testing, negative tests, and sensitive field checks

BEGIN;
SELECT plan(999); -- Will be adjusted based on actual test count`;
  }
  
  generateStructureTests(schema) {
    const tests = ['-- STRUCTURE TESTS'];
    
    for (const table of schema.getTables()) {
      tests.push(`SELECT has_table('${table.name}');`);
      
      for (const field of table.getFields()) {
        if (!field.isVirtual()) {
          tests.push(`SELECT has_column('${table.name}', '${field.name}');`);
          
          if (field.nonNull) {
            tests.push(`SELECT col_not_null('${table.name}', '${field.name}');`);
          }
        }
      }
    }
    
    return tests.join('\n');
  }
  
  generateConstraintTests(schema) {
    const tests = ['-- CONSTRAINT TESTS'];
    
    for (const table of schema.getTables()) {
      for (const field of table.getFields()) {
        if (field.isPrimaryKey()) {
          tests.push(`SELECT col_is_pk('${table.name}', '${field.name}');`);
        }
        
        if (field.isUnique()) {
          tests.push(`SELECT col_is_unique('${table.name}', '${field.name}');`);
        }
        
        if (field.isForeignKey()) {
          const ref = field.getForeignKeyRef();
          if (ref) {
            const [refTable, refCol] = ref.split('.');
            tests.push(`SELECT fk_ok('${table.name}', '${field.name}', '${refTable}', '${refCol || 'id'}');`);
          }
        }
        
        // Check for array item constraints
        if (field.list && field.itemNonNull) {
          tests.push(`-- Check ${field.name} doesn't allow NULL array elements`);
          tests.push(`SELECT throws_ok($$`);
          tests.push(`  INSERT INTO "${table.name}" ("${field.name}") VALUES (ARRAY[NULL])`);
          tests.push(`$$, 'new row for relation "${table.name}" violates check constraint');`);
        }
      }
    }
    
    return tests.join('\n');
  }
  
  generateEnhancedRLSTests(schema) {
    const tests = ['-- ENHANCED RLS TESTS'];
    tests.push('-- Testing each operation (SELECT/INSERT/UPDATE/DELETE) separately');
    
    for (const table of schema.getTables()) {
      const rls = table.directives?.['@rls'];
      if (!rls?.enabled) continue;
      
      const tableName = table.name;
      const uid = table.uid || table.name.toLowerCase();
      
      tests.push(`\n-- RLS Tests for ${tableName}`);
      tests.push(`SELECT table_has_rls('${tableName}');`);
      
      // Test each operation's policy exists
      const operations = {
        'SELECT': rls.select,
        'INSERT': rls.insert,
        'UPDATE': rls.update,
        'DELETE': rls.delete
      };
      
      for (const [op, policy] of Object.entries(operations)) {
        if (!policy) continue;
        
        const policyName = `policy_${tableName}_${op.toLowerCase()}_${uid}`;
        tests.push(`\n-- Test ${op} policy exists`);
        tests.push(`SELECT policy_exists('${tableName}', '${policyName}');`);
        
        // Test as authenticated user (owner)
        tests.push(`-- Test ${op} as owner`);
        tests.push(`SET LOCAL request.jwt.claims = '{"sub": "user-123", "role": "authenticated"}';`);
        
        if (op === 'SELECT') {
          tests.push(`SELECT lives_ok($$`);
          tests.push(`  SELECT * FROM "${tableName}" WHERE created_by = 'user-123'`);
          tests.push(`$$, 'Owner should be able to SELECT their records');`);
        } else if (op === 'INSERT') {
          tests.push(`SELECT lives_ok($$`);
          tests.push(`  INSERT INTO "${tableName}" (created_by) VALUES ('user-123')`);
          tests.push(`$$, 'Owner should be able to INSERT');`);
        } else if (op === 'UPDATE') {
          tests.push(`SELECT lives_ok($$`);
          tests.push(`  UPDATE "${tableName}" SET updated_at = NOW() WHERE created_by = 'user-123'`);
          tests.push(`$$, 'Owner should be able to UPDATE their records');`);
        } else if (op === 'DELETE') {
          tests.push(`SELECT lives_ok($$`);
          tests.push(`  DELETE FROM "${tableName}" WHERE created_by = 'user-123'`);
          tests.push(`$$, 'Owner should be able to DELETE their records');`);
        }
        
        // Negative test - different user
        tests.push(`\n-- Test ${op} as different user (negative test)`);
        tests.push(`SET LOCAL request.jwt.claims = '{"sub": "user-456", "role": "authenticated"}';`);
        
        if (op === 'UPDATE') {
          tests.push(`SELECT throws_ok($$`);
          tests.push(`  UPDATE "${tableName}" SET updated_at = NOW() WHERE created_by = 'user-123'`);
          tests.push(`$$, 'new row violates row-level security policy');`);
        } else if (op === 'DELETE') {
          tests.push(`SELECT throws_ok($$`);
          tests.push(`  DELETE FROM "${tableName}" WHERE created_by = 'user-123'`);
          tests.push(`$$, 'new row violates row-level security policy');`);
        }
      }
      
      // Test ownership change regression
      tests.push(`\n-- Test ownership change protection`);
      tests.push(`SET LOCAL request.jwt.claims = '{"sub": "user-123", "role": "authenticated"}';`);
      tests.push(`SELECT throws_ok($$`);
      tests.push(`  UPDATE "${tableName}" SET created_by = 'user-456' WHERE created_by = 'user-123'`);
      tests.push(`$$, 'Should not be able to change ownership');`);
    }
    
    return tests.join('\n');
  }
  
  generateSensitiveFieldTests(schema) {
    const tests = ['-- SENSITIVE FIELD TESTS'];
    tests.push('-- Testing @sensitive and @pii directive handling');
    
    for (const table of schema.getTables()) {
      for (const field of table.getFields()) {
        const isSensitive = field.directives?.['@sensitive'];
        const isPII = field.directives?.['@pii'];
        
        if (isSensitive || isPII) {
          const fieldType = isPII ? 'PII' : 'sensitive';
          tests.push(`\n-- Test ${fieldType} field: ${table.name}.${field.name}`);
          
          // Test that field is not exposed in error messages
          tests.push(`-- Ensure ${field.name} is not leaked in errors`);
          tests.push(`SELECT throws_ok($$`);
          tests.push(`  INSERT INTO "${table.name}" ("${field.name}") VALUES (NULL)`);
          tests.push(`$$, NULL, 'Error should not expose ${fieldType} data');`);
          
          // Test encryption if it's a password field
          if (field.name.toLowerCase().includes('password')) {
            tests.push(`-- Test password is hashed`);
            tests.push(`SELECT isnt(${field.name}, 'plaintext', 'Password should be hashed')`);
            tests.push(`FROM "${table.name}" LIMIT 1;`);
          }
          
          // Test audit logging for PII
          if (isPII) {
            tests.push(`-- Test PII access is logged`);
            tests.push(`-- This would check audit tables in production`);
            tests.push(`SELECT ok(true, 'PII access logging placeholder');`);
          }
        }
      }
    }
    
    return tests.join('\n');
  }
  
  generateNegativeTests(schema) {
    const tests = ['-- NEGATIVE TESTS'];
    tests.push('-- Testing unauthorized access patterns');
    
    for (const table of schema.getTables()) {
      const hasRLS = table.directives?.['@rls']?.enabled;
      
      if (hasRLS) {
        tests.push(`\n-- Negative tests for ${table.name}`);
        
        // Test anonymous access
        tests.push(`-- Test anonymous user access`);
        tests.push(`SET LOCAL request.jwt.claims = '{"role": "anon"}';`);
        tests.push(`SELECT is_empty($$`);
        tests.push(`  SELECT * FROM "${table.name}"`);
        tests.push(`$$, 'Anonymous users should not see any records');`);
        
        // Test expired token
        tests.push(`-- Test expired token`);
        tests.push(`SET LOCAL request.jwt.claims = '{"sub": "user-123", "role": "authenticated", "exp": 1}';`);
        tests.push(`SELECT throws_ok($$`);
        tests.push(`  SELECT * FROM "${table.name}"`);
        tests.push(`$$, 'Token expired');`);
        
        // Test SQL injection attempt
        tests.push(`-- Test SQL injection protection`);
        tests.push(`SELECT throws_ok($$`);
        tests.push(`  SELECT * FROM "${table.name}" WHERE id = '1; DROP TABLE ${table.name};--'`);
        tests.push(`$$, NULL, 'Should handle SQL injection attempt safely');`);
      }
    }
    
    // Test for common security issues
    tests.push(`\n-- Common security tests`);
    tests.push(`-- Test no tables allow public write`);
    tests.push(`SELECT is_empty($$`);
    tests.push(`  SELECT tablename FROM pg_tables`);
    tests.push(`  WHERE tableowner = 'postgres'`);
    tests.push(`  AND has_table_privilege('anon', tablename, 'INSERT')`);
    tests.push(`$$, 'No tables should allow anonymous INSERT');`);
    
    return tests.join('\n');
  }
}